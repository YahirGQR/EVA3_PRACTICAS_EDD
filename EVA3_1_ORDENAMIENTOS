/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eva3_1_ordenamientos;

/**
 *
 * @author moviles
 */
public class EVA3_1_ORDENAMIENTOS {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        
        // Se crean los arreglos el original y se crea la copia
        int[] arregloDatos = new int[20];
        int[] arregloSel = new int[arregloDatos.length];
        int[] arregloIns = new int[arregloDatos.length];
        // Imprimimos el pimer arreglo(Original)
        System.out.println("ARREGLO ORIGINAL: ");
        llenar(arregloDatos);
        imprimir(arregloDatos);
        // Se imprime para comprobar el segundo arreglo(Copia)
        System.out.println("SELECTION SORT: ");
        copiar(arregloDatos, arregloSel);
        imprimir(arregloSel);
        // Se ordena el arreglo copia
        System.out.println("ARREGLO COPIA ORDENADO: ");
        double ini = System.nanoTime();
        selectionSort(arregloSel);
        double fin = System.nanoTime();
        imprimir(arregloSel);
        System.out.println("Selection Sort: " + (fin - ini));
        // porbamos el metodo insertion
        System.out.println("INSERTION SORT: ");
        copiar(arregloDatos, arregloIns);
        imprimir(arregloIns);
        // Se ordena el arreglo copia
        System.out.println("ARREGLO COPIA ORDENADO: ");
        ini = System.nanoTime();
        insertionSort(arregloIns);
        fin = System.nanoTime();
        imprimir(arregloIns);
        System.out.println("Insertion Sort: " + (fin - ini));
        
    }
    
    // LLENAR ARREGLO
    public static void llenar(int[] arreglo){
        for (int i = 0; i < arreglo.length; i++) {
            arreglo[i] = (int)(Math.random() * 100);
        }
    }
    
    // IMPRIMIR
    public static void imprimir(int[] arreglo){
        for (int i = 0; i < arreglo.length; i++) {
            if(arreglo[i] < 10)
                System.out.print("[" + arreglo[i] + "]");
            else
                System.out.print("[" + arreglo[i] + "]");
        }
        System.out.println("");
    }
    
    // COPIAR ARREGLO
    public static void copiar(int[] arreglo, int[] copia){
        for (int i = 0; i < arreglo.length; i++) {
            copia[i] = arreglo[i]; 
        }
    }
    
    // SELECTION SORT O(n^2)
    // COMPARACIONES 
    // INTERCAMBIOS (SWAP)
    public static void selectionSort(int[] arreglo){
        for (int i = 0; i < arreglo.length; i++) {
            int min = i;
            // BUSCO EL ELEMENTO (POSICION) MAS PEQUEÑO
            for (int j = i + 1; j < arreglo.length; j++) {
                // Buscar el más pequeño
                if(arreglo[min] > arreglo[j])
                    min = j;
            }
            // SWAP INTERCAMBIAR 
            if(min != i){
                int temp = arreglo[i];
                arreglo[i] = arreglo[min];
                arreglo[min] = temp;
            }
        }
    }
    public static void insertionSort(int[] arreglo){
        for (int i = 1; i < arreglo.length; i++) {
            int temp = arreglo[i]; // es lo que vamos a ordenar
            int insP = i;
            // BUSCAMOS EN QUE PUNTO DEBE QUEDAR TEMP
            // ESA POSICIÓN QUEDA ALMACENADA EN isnP
            for (int prev = i - 1; prev >= 0; prev--) { // comparamos
                if(arreglo[prev] > temp){
                    // swap (intercambio parcial)
                    arreglo[insP] = arreglo[prev];
                    insP--;
                }else{
                    break;
                }
            }
            arreglo[insP] = temp;
        }
    }
}
